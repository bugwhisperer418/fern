#! /bin/rc
#
# Author: Andie Keller <andie@bugehisperer.dev>

#{{{ Shell settings
#}}}

#{{{ Variables
fVersion='0.0.9';
fNotes=$FERN_VAULT/notes;
fJournals=$FERN_VAULT/journals;
fTemplates=$FERN_VAULT/templates;
fBookmarks=$FERN_VAULT/bookmarks;
dj=$fTemplates/daily-journal.md;
temp=$FERN_VAULT/.temp;
#}}}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~         MAIN LOGIC         ~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fn main {
	if (help_wanted $*) usage_lite;
	if (~ $1 'help') usage_indepth;
	if (~ $1 'vault') process_vault $*;
	if (! test -d $FERN_VAULT)
		printf 'Error: Fern Vault folder does not exist or the environment variable FERN_VAULT is not setup correctly.\nRun "fern vault create <path>" to setup a new Fern Vault folder for management.\nIf you already went through the Fern Vault creation process, please verify that the FERN_VAULT environment variable is set correctly. You can verify this with "echo ''%s''".\n' $FERN_VAULT;
		exit 'Usage';
	if (! test -f $dj)
		print_err 'Error: The required "daily-journal.md" template file does not exist! Please create one at "'^$dj^'" and then try again.';
	decipher_request $*;
	exit '';
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~    HELPER FUNCTIONS      ~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# catches if no args are passed OR the first arg is a "common" help flag
fn help_wanted {
	~ $#* 0 || ~ $1 '-h' || ~ $1 '--help' || ~ $1 '-?'
}

fn usage_lite {
	printf 'fern - a knowledge management system [v%s]\nUsage:\tfern COMMAND [ACTION [ARGS...]]\n\nfern is a swiss-army knife for your notetaking and personal knowledge management. Fern is a helpful commandline tool to manage, curate, and search a vault of your personal notes.\n\nTo get started with a new Fern Vault, use "fern vault create <path_to_vault>".\nFor a brief list of all commands and their options, use "fern help".\nFor more in-depth documentation and advanced usage see the fern manpage ["man fern"] and/or https://sr.ht/~bugwhisperer/fern/\n' $fVersion;
	exit 0;
}

fn usage_indepth {
	printf 'USAGE:\n  fern COMMAND [ACTION [ARGS...]]\n\nCOMMANDS:\n  help\t\t\t\t\t\t\tdisplay Fern help\n\n  vault create <path>\t\t\t\t\tsetup a new Fern Vault\n  vault stat\t\t\t\t\t\tget stats of Fern Vault\n\n  bookmark list\t\t\t\t\t\tlist out all Bookmarks\n  bookmark add <note_name>\t\t\t\tadd a note to Bookmarks\n  bookmark del <note_name>\t\t\t\tremove a note from Bookmarks\n\n  journal\t\t\t\t\t\topens today''s Journal entry\n  journal open yesterday|today|tomorrow|<YYYY-MM-DD>\topen a Journal entry\n  journal find <pattern>\t\t\t\tsearch Journals for matching pattern\n\n  note add <note> [<template>]\t\t\t\tadd a new Note\n  note del <note>\t\t\t\t\tdelete a Note\n  note open <note>\t\t\t\t\topen a Note\n  note move <old_note> \<new_note\>\t\t\tmove/rename a Note\n  note find <pattern>\t\t\t\t\tsearch Notes for matching pattern\n\n  template list\t\t\t\t\t\tget list of Template files\n  template add <template>\t\t\t\tadd a new Template\n  template del <template>\t\t\t\tdelete a Template\n  template open <template>\t\t\t\topen a Template\n  template move <old_template> \<new_template\>\t\tmove/rename a Template\n\nFor more in-depth documentation and advanced usage see the fern manpage ["man fern"] and/or https://sr.ht/~bugwhisperer/fern/\n';
	exit 0;
}

fn cmd_usage {
	switch($1) {
	case vault
		printf 'Usage:\n  fern vault stat\n  fern vault create <path>\n';
	case bookmark
		printf 'Usage:\n  fern bookmark list\n  fern bookmark add|del <note_name>\n';
	case journal
		printf 'Usage:\n  fern journal\n  fern journal open yesterday|today|tomorrow|<YYYY-MM-DD>\n  fern journal find <search_pattern> [--verbose]\n';
	case note
		printf 'Usage:\n  fern note\n  fern note del|open <note_name>\n  fern note add <note_name> [<template_name>]\n  fern note find <search_pattern> [--verbose]\n  fern note move <old_note> \<new_note\>\n  fern note append <template_name> [<note_name>]\n';
	case template
		printf 'Usage:\n  fern template list\n  fern template add|del|open <template_name>\n  fern template move <old_template> \<new_template\>\n';
	}
	exit 0;
}

# Takes all user arguments. Tries to find the right command >> action to execute.
fn decipher_request {
	switch ($1) {
	case vault
		process_vault $*;
	case bookmark
		process_bookmark $*;
	case journal
		process_journal $*;
	case note
		process_note $*;
	case template
		process_template $*;
	case *
		print_err 'Usage: Invalid command - "'^$1^'". See "fern help" or the manpage ["man fern"] for guidance.';
	}
}

# $1 - action; $2 - Vault path;
fn process_vault {
	if (test $#* -lt 2) cmd_usage $1;
	switch ($2) {
	case create
		if (! ~ $#* 3) cmd_usage $1;
		if (test -d $3) print_err 'Error: Folder already exists "'^$3^'"\n';
		# setup a new folder for management
		mkdir --parents $3;
		mkdir --parents $3/notes;
		mkdir --parents $3/journals;
		mkdir --parents $3/templates;
		touch $3/bookmarks;
		touch $3/templates/daily-journal.md;
		printf '# {{DATE}}' | tee --append $3/templates/daily-journal.md >/dev/null;
		printf 'A Fern Vault has been setup for you at "%s".\nYou''re all ready to start managing your notes!\nBe sure to review "fern help" for more information on the available commands and their arguments.\nA starter "daily-journal" template file was created at "%s/daily-journal.md".\nFeel free to add any starting contents that you require of your daily journal entries.\n' $3 $3/templates;
		printf '\n~~ IMPORTANT! ~~\nIn order for fern to know where to find your Vault, add the following to your shell''s RC File [ex. "$HOME/.bashrc" or "$HOME/.zshrc"]:\n' $3;
		printf 'export FERN_VAULT="%s"\n' $3;
	case stat
		# Vault stats printed out
		cntB='{wc --lines < $fBookmarks};
		cntN='{find $fNotes | wc --lines};
		cntJ='{find $fJournals | wc --lines};
		cntT='{find $fTemplates | wc --lines};
		printf 'Vault Location: %s\n# Bookmarks:\t%d\n# Journals:\t%d\n# Notes:\t%d\n# Templates:\t%d\n' $FERN_VAULT $cntB $cntJ $cntN $cntT;
	case *
		cmd_usage $1;
	}
}

# $1 - action; $2 - Note name;
fn process_bookmark {
	if (test $#* -lt 2) cmd_usage $1;
	switch ($2) {
	case list
		cat $fBookmarks;
	case add
		if (! ~ $#* 3) cmd_usage $1;
		target=ext_checks $3;
		if (test -f $fNotes/$target)
			print_err 'Error: Note not found with the name "'^$target^'".';
		if ('{awk '/$target/' < '$fBookmarks' | wc --lines} -eq 0) {
			printf "%s" $target | tee --append $fBookmarks >/dev/null;
			sort $fBookmarks -o $fBookmarks;
		}
	case del
		if (! ~ $#* 3) cmd_usage $1;
		target=ext_checks $3;
		mktemp -d -t $temp;
		grep -xv $target $fBookmarks > $temp && mv $temp $fBookmarks;
	case *
		cmd_usage $1;
	}
}

# $1 - action; $2 - template name; $3 - template name;
fn process_template {
	if (test $#* -lt 2) cmd_usage $1;
	switch ($2) {
	case list
		ls $fTemplates -1;
	case open
		if (test $#* -lt 3) cmd_usage $1;
		target=ext_checks $3;
		if (! test -f $fTemplates/$target)
			print_err 'Error: Template not found with the name "'^$target^'".';
		$EDITOR $fTemplates/$target;
	case add
		if (test $#* -lt 3) cmd_usage $1;
		target=ext_checks $3;
		if (test -f $target)
			print_err 'Error: Template already exists with that name "'^$target^'".';
		$EDITOR $fTemplates/$target;
	case del
		if (test $#* -lt 3) cmd_usage $1;
		target=ext_checks $3;
		if (! tests -f $fTemplates/$target)
			print_err 'Error: Template not found with the name "'^$target^'".';
		rm -f $fTemplates/$target;
	case move
		if (test $#* -lt 3) cmd_usage $1;
		oldT=$(ext_checks $3);
		if (test $#* -lt 4) cmd_usage $1;
		newT=$(ext_checks $4);
		if (! test -f $fTemplates/$oldT)
			print_err 'Error: Template not found with the name "'^$oldT^'".';
		mv $fTemplates/$oldT $fTemplates/$newT;
	case *
		cmd_usage $1;
	}
}

# $1 - action; $2 - journal date | pattern string.;
fn process_journal {
	if (~ $#* 1)
		# shortcut to create/open a new journal for today's date
		create_journal '{date +'%Y-%m-%d'};
	if (test $#* -lt 3)
		cmd_usage $1;
	switch ($2) {
	case open
		switch ($3) {
		case today
			create_journal date +'%Y-%m-%d';
		case yesterday
			create_journal date --date='yesterday' +'%Y-%m-%d';
		case tomorrow
			create_journal date --date='tomorrow' +'%Y-%m-%d';
		case *
			if (date -d $3 '+%Y-%m-%d' >/dev/null 2>&1) {
				create_journal $3;
			} else {
				printf 'Usage: fern journal open yesterday|today|tomorrow|<YYYY-MM-DD>';
			}
		}
	case find
		if (~ $#* 3)
			find_items $3 $fJournals;
		if (~ $#* 4)
			find_items $3 $fJournals $4;
	case *
		cmd_usage $1;
	}
}

# $1 - action; $2 - note name | pattern string; $3 - note name | template name;
fn process_note {
	if (test $#* -lt 2) cmd_usage $1;
	switch ($2) {
	case open
		if (test $#* -lt 3) cmd_usage $1;
		# try to open a note with the exact name provided first
		target=ext_checks $3;
		if (! test -f $fNotes/$target)
			# search for the note by name given in other files
			hits=$(find_items $3 $fNotes);
			lines=$(echo $hits | wc -l);
			chars=$(echo $hits | wc -m);
			printf 'Error: Note not found with the name "%s".\n' $target;
			if (test $lines -eq 1 && test $chars -gt 1) {
				# if only 1 search record returned, open it
				$EDITOR $hits;
				exit 0;
			}
			if (test $lines -gt 1) {
				# if more than 1 record, display possible files of interest to user
				printf 'Several possible files of interest were found:\n%s\n' $hits;
			}
			exit 1;
		$EDITOR $fNotes/$target;
	case add
		if (test $#* -lt 3) cmd_usage $1;
		targetF=ext_checks $3;
		if (test -f $fNotes/$targetF)
			print_err 'Error: Note already exists with the name "'^$targetF^'".';
		# optional starting template provided
		if (~ $#* 4) {
			targetT=$(ext_checks $4);
			if (! test -f $fTemplates/$targetT)
				print_err 'Error: Template not found with the name "'^$targetT^'".';
			# create a new Note from a Template file
			cp $fTemplates/$targetT $fNotes/$targetF;
		}
		$EDITOR $fNotes/$targetF;
	case del
		if (test $#* -lt 3) cmd_usage $1;
		target=ext_checks $3;
		if (test -f $fNotes/$target) {
			rm -f $fNotes/$target;
			update_internal_links $target '\[!FILE REMOVED "'^$target^'"\]'};
		} else {
			print_err 'Error: Note not found with the name "'^$target^'".';
		}
	case move
		if (test $#* -lt 3) cmd_usage $1;
		targetOld=ext_checks $3;
		if (test $#* -lt 4) cmd_usage $1;
		targetNew=ext_checks $4;
		if (! test -f $fNotes/$targetOld)
			print_err 'Error: Note not found with the name "'^$targetOld^'".';
		if (test -f $fNotes/$targetNew)
			print_err 'Error: Note already exists with the name "'^$targetNew^'".';
		mv $fNotes/$targetOld $fNotes/$targetNew;
		update_internal_links $targetOld $targetNew;
	case find
		if (test $#* -lt 3) cmd_usage $1;
		if (~ $#* 3) find_items $3 $fNotes;
		if (~ $#* 4) find_items $3 $fNotes $4;
	case *
		cmd_usage $1;
	}
}

# $1 - filename;
fn ext_checks {
	# if not defined/empty OR check if ends in '.md'
	if (test -f $1 || ~ $1 '*.md') {
		printf '%s' $1; # spit back as is
	} else {
		printf '%s.md' $1; # append if not passed
	}
}

# $1 - journal date;
fn create_journal {
	target=ext_checks $fJournals/$1;
	if (test -f $target) {
		cp $dj $target;
		sed --in-place 's/DATE/'^$1^'/g' $target;
	}
	$EDITOR $target;
	exit 0;
}

# $1 - old name; $2 - new name;
fn update_internal_links {
	# update internal links in all Notes, Journals, Templates and Bookmarks
	find $fNotes -type f -print0 | xargs -0 sed --in-place 's/$1/$2/g';
	find $fJournals -type f -print0 | xargs -0 sed --in-place 's/$1/$2/g';
	find $fTemplates -type f -print0 | xargs -0 sed --in-place 's/$1/$2/g';
	sed --in-place 's/$1/$2/g' $fBookmarks;
}

# $1 - pattern; $2 - Folder of items to search over; $3 - verbose flag;
fn find_items {
	if (~ $#* 3 && ~ $3 '--verbose') {
		find $2 -name '*.md' -exec grep --dereference-recursive --line-number --ignore-case $1 \+ | sort | less;
	} else {
		find $2 -name '*.md' -exec grep --dereference-recursive --line-number --ignore-case --files-with-matches $1 \+ | sort;
	}
}

# $1 - Error message to print;
fn print_err {
	echo $1 >[1=2];
	exit 1;
}

main $*;
